package application;

import java.io.IOException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import model.Client;
import model.Provider;
import server.ClientCall;
import server.RequestResponse;
import server.RequestType;
import svrcon.EstablishConnectionSv;
import svrcon.SvConnection;

public class LoginController {

	@FXML
	private Label lblStatus;

	@FXML
	private TextField txtUsername;

	@FXML
	private PasswordField txtPassword;

	@FXML
	private Button btnClose;

	@FXML
	private CheckBox cbProvider;

	public void login(ActionEvent event) {
		if (cbProvider.isSelected() == false) {
			Client matchedClient = null;
			RequestResponse<List<Client>> lookup = new RequestResponse<List<Client>>(Main.host, Main.portNumber);
			lookup.request = RequestType.GET_CLIENT_BY_USERNAME;
			lookup.parameters.add(txtUsername.getText());
			ClientCall<List<Client>> callable = new ClientCall<List<Client>>(lookup, Main.clientSocket);
			List<Client> client = null;
			Future<List<Client>> future = Main.clientExecutor.submit(callable);
			try {
				client = future.get();			
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
			if (client != null && client.get(0).getPassword().equals(txtPassword.getText())) {
				matchedClient = client.get(0);
				try {
					Stage mainStage = new Stage();
					FXMLLoader loader = new FXMLLoader();
					loader.setLocation(getClass().getResource("/application/Main.fxml"));
					loader.load();
					Parent root = loader.getRoot();
					Scene scene = new Scene(root, 500, 500);
					mainStage.setScene(scene);
					mainStage.setTitle("Payment Services");

					MainController mainController = loader.getController();
					mainController.setCurrentClient(matchedClient);

					mainStage.show();
					this.close();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			} else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Login Error");
				alert.setContentText("Username or password are incorrect!");
				alert.show();
			}
		} else {
			Provider matchedProvider = null;
			RequestResponse<List<Provider>> lookup = new RequestResponse<List<Provider>>(Main.host, Main.portNumber);
			lookup.request = RequestType.GET_PROVIDERS;
			ClientCall<List<Provider>> callable = new ClientCall<List<Provider>>(lookup, Main.clientSocket);
			List<Provider> provider = null;
			Future<List<Provider>> future = Main.clientExecutor.submit(callable);
			try {
				provider = future.get();			
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}
			if (provider != null) {
				matchedProvider = provider.get(0);
				try {
					Stage mainStage = new Stage();
					FXMLLoader loader = new FXMLLoader();
					loader.setLocation(getClass().getResource("/application/Provider.fxml"));
					loader.load();
					Parent root = loader.getRoot();
					Scene scene = new Scene(root, 500, 500);
					mainStage.setScene(scene);
					mainStage.setTitle("Payment Services");

					MainController mainController = loader.getController();

					mainStage.show();
					this.close();
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
			} else {
				Alert alert = new Alert(AlertType.ERROR);
				alert.setTitle("Login Error");
				alert.setContentText("Username or password are incorrect!");
				alert.show();
			}
		}

	}

	public void register(ActionEvent event) {
		try {
			Stage registerStage = new Stage();
			Parent root = FXMLLoader.load(getClass().getResource("/application/Register.fxml"));
			Scene scene = new Scene(root, 350, 500);
			registerStage.setScene(scene);
			registerStage.show();

			this.close();
		} catch (IOException e) {
			System.out.println(e.getMessage());
		}
	}

	public void close() {
		Stage stage = (Stage) btnClose.getScene().getWindow();
		stage.close();
	}
}
