package application;

import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.ResourceBundle;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javafx.application.Platform;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import model.Account;
import model.Bill;
import model.BillFX;
import model.Client;
import model.Contract;
import model.Provider;
import model.ProviderFX;
import server.ClientCall;
import server.RequestResponse;
import server.RequestType;

/**
 * This class is used for the Client GUI.
 * 
 * @author Solovastru Mircea
 * @version 1.0
 * @since 2016-06-01
 * @see Initializable
 */
public class MainController implements Initializable {

	/**
	 * Label field for client's name.
	 * 
	 * @see Label
	 */
	@FXML
	private Label lblClientName;

	/**
	 * Label field for client's balance.
	 * 
	 * @see Label
	 */
	@FXML
	private Label lblClientBalance;

	/**
	 * Check box to see all bills or not paid bills.
	 * 
	 * @see CheckBox
	 */
	@FXML
	private CheckBox cbViewAllBills;

	/**
	 * Check box to choose auto payment for bills.
	 * 
	 * @see ChechBox
	 */
	@FXML
	private CheckBox cbAutoPay;

	/**
	 * TableView for bills.
	 * 
	 * @see TableView
	 */
	@FXML
	private TableView<BillFX> table;

	/**
	 * TableView for my providers.
	 * 
	 * @see TableView
	 */
	@FXML
	private TableView<ProviderFX> myProvidersTable;

	/**
	 * TableView for all providers.
	 * 
	 * @see TableView
	 */
	@FXML
	private TableView<ProviderFX> providersTable;

	/**
	 * Button to pay bills.
	 * 
	 * @see Button
	 */
	@FXML
	private Button btnPayBills;

	/**
	 * Button to add provider.
	 * 
	 * @see Button
	 */
	@FXML
	private Button btnAddProvider;

	/**
	 * Button to delete provider.
	 * 
	 * @see Button
	 */
	@FXML
	private Button btnDeleteProvider;

	/**
	 * Table column for id.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, Number> id;

	/**
	 * Table column for amount.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, Number> ammount;

	/**
	 * Table column for details.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, String> details;

	/**
	 * Table column for issue date.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, String> issueDate;

	/**
	 * Table column for due date.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, String> dueDate;

	/**
	 * Table column for name.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<BillFX, String> payDate;

	@FXML
	private TableColumn<ProviderFX, String> nameMyProvider;

	/**
	 * Table column for iban.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<ProviderFX, String> ibanMyProvider;

	/**
	 * Table column for name.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<ProviderFX, String> nameProvider;

	/**
	 * Table column for iban.
	 * 
	 * @see TableColumn
	 */
	@FXML
	private TableColumn<ProviderFX, String> ibanProvider;

	/**
	 * List for the bills.
	 */
	private ObservableList<BillFX> data;

	/**
	 * List for my providers.
	 */
	private ObservableList<ProviderFX> myProviders;

	/**
	 * List for all the providers.
	 */
	private ObservableList<ProviderFX> providers;

	/**
	 * Field for the current client.
	 */
	private Client currentClient;

	/**
	 * SimpleDateFormat used for displaying the date as a string.
	 */
	private SimpleDateFormat sdf;

	/**
	 * Sets the logged client, and the details needed.
	 * 
	 * @param currentClient
	 */
	public void setCurrentClient(Client currentClient) {
		this.lblClientName.setText(currentClient.getName() + " " + currentClient.getSurname());
		this.lblClientBalance.setText(Double.toString(currentClient.getAccounts().get(0).getBalance()));
		if (currentClient.getBills().isEmpty() == false) {
			for (Bill bill : currentClient.getBills()) {
				if (bill.getPayDate() == null) {
					data.add(new BillFX(bill.getIdBill(), bill.getAmount(), bill.getDetails(),
							sdf.format(bill.getIssueDate()), sdf.format(bill.getDueDate()), "-"));
				}
			}
		}

		System.out.println(currentClient.getContracts().size());

		RequestResponse<List<Provider>> lookup = new RequestResponse<List<Provider>>(Main.host, Main.portNumber);
		lookup.request = RequestType.GET_PROVIDERS;
		ClientCall<List<Provider>> callable = new ClientCall<List<Provider>>(lookup);
		List<Provider> provs = null;
		Future<List<Provider>> future = Main.clientExecutor.submit(callable);
		try {
			provs = future.get();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
		}

		for (Provider prov : provs) {
			providers.add(new ProviderFX(prov.getIdProvider(), prov.getIban(), prov.getName(), prov.getPassword()));
		}
		
		if (currentClient.getContracts().isEmpty() == false) {
			System.out.println(currentClient.getContracts().size());
			for (Contract contract : currentClient.getContracts()) {
				Provider prov = contract.getProvider();
				for (int i = 0; i < provs.size(); i++) {
					if (provs.get(i).getName().compareTo(prov.getName()) == 0) {
						provs.remove(i);
					}
				}
				System.out.println(prov.getName());
				myProviders
						.add(new ProviderFX(prov.getIdProvider(), prov.getIban(), prov.getName(), prov.getPassword()));
			}
		}

		this.currentClient = currentClient;
		WatchForChanges watch = new WatchForChanges();
		watch.start();
	}

	/**
	 * @return the current client
	 */
	public Client getCurrentClient() {
		return this.currentClient;
	}

	/**
	 * Closes the application.
	 */
	public void close() {
		Platform.exit();
	}

	/**
	 * Method used for a small about box, where the programmers names are
	 * written.
	 */
	public void onAbout() {
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setTitle("Payment Services");
		alert.setHeaderText("Developers");
		alert.setContentText("This application was developed by Florin Sia and Mircea Solovastru");
		alert.show();
	}

	/**
	 * This check box event is used to see whether all the bills, or the pay
	 * bills.
	 */
	public void checkBoxHandle() {
		if (cbViewAllBills.isSelected() == true) {
			System.out.println(this.currentClient.getBills().size());
			data.clear();
			for (Bill bill : currentClient.getBills()) {
				if (bill.getPayDate() != null) {
					data.add(new BillFX(bill.getIdBill(), bill.getAmount(), bill.getDetails(),
							sdf.format(bill.getIssueDate()), sdf.format(bill.getDueDate()),
							sdf.format(bill.getPayDate())));
				} else {
					data.add(new BillFX(bill.getIdBill(), bill.getAmount(), bill.getDetails(),
							sdf.format(bill.getIssueDate()), sdf.format(bill.getDueDate()), "-"));
				}
			}
		} else {
			System.out.println(this.currentClient.getBills().size());
			data.clear();
			for (Bill bill : currentClient.getBills()) {
				if (bill.getPayDate() == null) {
					data.add(new BillFX(bill.getIdBill(), bill.getAmount(), bill.getDetails(),
							sdf.format(bill.getIssueDate()), sdf.format(bill.getDueDate()), "-"));
				}
			}
		}
	}

	/**
	 * Method used to add a provider. This method establishes a contract between
	 * the client and the provider.
	 * 
	 * @param event
	 */
	public void addProvider(ActionEvent event) {
		ProviderFX providerFX = (ProviderFX) providersTable.getSelectionModel().getSelectedItem();
		if (providerFX != null) {
			System.out.println(providerFX.getIban());
			Contract contract = new Contract();
			if (cbAutoPay.isSelected() == true) {
				contract.setAutoPay(true);
			} else {
				contract.setAutoPay(false);
			}
			contract.setClient(currentClient);
			contract.setDate(Calendar.getInstance().getTime());

			Provider provider = null;
			RequestResponse<List<Provider>> lookup = new RequestResponse<List<Provider>>(Main.host, Main.portNumber);
			lookup.request = RequestType.GET_PROVIDER_BY_NAME;
			lookup.parameters.add(providerFX.getName());
			ClientCall<List<Provider>> callable = new ClientCall<List<Provider>>(lookup);
			List<Provider> provs = null;
			try {
				Future<List<Provider>> future = Main.clientExecutor.submit(callable);
				provs = future.get();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}

			provider = provs.get(0);
			contract.setProvider(provider);

			RequestResponse<Contract> lookup2 = new RequestResponse<Contract>(Main.host, Main.portNumber);
			lookup2.request = RequestType.ADD_CONTRACT;
			lookup2.parameters.add(contract);
			ClientCall<Contract> callable2 = new ClientCall<>(lookup2);
			Main.clientExecutor.submit(callable2);
			System.out.println("Contract: " + contract.getProvider().getName());
			for (int i = 0; i < providers.size(); i++) {
				System.out.println(" --" + providers.get(i).getName());
				if (providers.get(i).getName().compareTo(contract.getProvider().getName()) == 0) {
					providers.remove(i);
				}
			}

			myProviders.add(providerFX);
		} else {
			Main.createAlert(AlertType.ERROR, "Providers", "Choose a provider!");
		}
	}

	/**
	 * Method used to delete the selected provider. Also, there are some checks:
	 * in order to unsubscribe from a provider, all the bills related to that
	 * provider.
	 * 
	 * @param event
	 */
	public void deleteProvider(ActionEvent event) {
		ProviderFX providerFX = (ProviderFX) myProvidersTable.getSelectionModel().getSelectedItem();
		if (providerFX != null) {
			Provider provider = null;
			RequestResponse<List<Provider>> lookup = new RequestResponse<List<Provider>>(Main.host, Main.portNumber);
			lookup.request = RequestType.GET_PROVIDER_BY_NAME;
			lookup.parameters.add(providerFX.getName());
			ClientCall<List<Provider>> callable = new ClientCall<List<Provider>>(lookup);
			List<Provider> provs = null;
			try {
				Future<List<Provider>> future = Main.clientExecutor.submit(callable);
				provs = future.get();
			} catch (InterruptedException | ExecutionException e) {
				e.printStackTrace();
			}

			provider = provs.get(0);

			boolean hasPaidAllBills = true;

			for (Bill b : currentClient.getBills()) {
				if (b.getProvider().getName().compareTo(provider.getName()) == 0) {
					if (b.getPayDate() == null) {
						hasPaidAllBills = false;
						break;
					}
				}
			}

			if (hasPaidAllBills == true) {
				Contract contract = null;

				RequestResponse<List<Contract>> lookup3 = new RequestResponse<>(Main.host, Main.portNumber);
				lookup3.request = RequestType.GET_CONTRACT_BY_DETAILS;
				lookup3.parameters.add(currentClient);
				lookup3.parameters.add(provider);
				ClientCall<List<Contract>> callable3 = new ClientCall<>(lookup3);
				List<Contract> contracts = null;
				try {
					Future<List<Contract>> future = Main.clientExecutor.submit(callable3);
					contracts = future.get();
				} catch (InterruptedException | ExecutionException e) {
					e.printStackTrace();
				}

				System.out.println(contracts.size());

				contract = contracts.get(0);

				RequestResponse<Contract> lookup2 = new RequestResponse<Contract>(Main.host, Main.portNumber);
				lookup2.request = RequestType.DELETE_CONTRACT;
				lookup2.parameters.add(contract.getIdContract());
				ClientCall<Contract> callable2 = new ClientCall<>(lookup2);
				Main.clientExecutor.submit(callable2);
				myProviders.remove(providerFX);
				providers.add(providerFX);
			} else {
				Main.createAlert(AlertType.ERROR, "Providers", "Pay your bills first!");
			}

		} else {
			Main.createAlert(AlertType.ERROR, "Providers", "Choose one provider!");
		}
	}

	/**
	 * Method used to pay the selected bill. Also, here are some normal checks,
	 * whether the client has money to pay the bill, or if the bill was paid
	 * before.
	 */
	public void payBills() {
		BillFX bill = (BillFX) table.getSelectionModel().getSelectedItem();
		System.out.println("payBills: " + this.currentClient.getBills().size());
		if (bill.getDueDate() != null) {
			int accountId = this.currentClient.getAccounts().get(0).getIdAccount();
			double newBalance = this.currentClient.getAccounts().get(0).getBalance() - bill.getAmmount();
			if (newBalance >= 0) {
				RequestResponse<Account> lookup = new RequestResponse<>(Main.host, Main.portNumber);
				lookup.request = RequestType.UPDATE_BALANCE;
				lookup.parameters.add(accountId);
				lookup.parameters.add(newBalance);
				ClientCall<Account> callable = new ClientCall<Account>(lookup);
				Main.clientExecutor.submit(callable);

				RequestResponse<Bill> lookup2 = new RequestResponse<Bill>(Main.host, Main.portNumber);
				lookup2.request = RequestType.PAY_BILL;
				lookup2.parameters.add(bill.getIdBill());
				ClientCall<Bill> callable2 = new ClientCall<Bill>(lookup2);
				Main.clientExecutor.submit(callable2);

				this.lblClientBalance.setText(Double.toString(newBalance));
				for (int i = 0; i < currentClient.getBills().size(); i++) {
					if (currentClient.getBills().get(i).getIdBill() == bill.getIdBill()) {
						currentClient.getBills().get(i).setPayDate(Calendar.getInstance().getTime());
					}
				}
				data.remove(bill);

			} else {
				Main.createAlert(AlertType.ERROR, "Bills", "No money to pay the selected bill!");
			}

		} else {
			Main.createAlert(AlertType.ERROR, "Bills", "Bill already paid!");
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see javafx.fxml.Initializable#initialize(java.net.URL,
	 * java.util.ResourceBundle)
	 */
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		sdf = new SimpleDateFormat("dd.MM.yyyy");
		data = FXCollections.observableArrayList();
		myProviders = FXCollections.observableArrayList();
		providers = FXCollections.observableArrayList();
		table.setPlaceholder(new Label("No bill!"));
		table.setItems(data);
		myProvidersTable.setPlaceholder(new Label("No providers!"));
		myProvidersTable.setItems(myProviders);
		providersTable.setPlaceholder(new Label("No providers!"));
		providersTable.setItems(providers);
		id.setCellValueFactory(c -> new SimpleIntegerProperty(c.getValue().getIdBill()));
		ammount.setCellValueFactory(c -> new SimpleDoubleProperty(c.getValue().getAmmount()));
		details.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getDetails()));
		issueDate.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getIssueDate().toString()));
		dueDate.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getDueDate().toString()));
		payDate.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getPayDate().toString()));
		nameMyProvider.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getName().toString()));
		nameProvider.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getName().toString()));
		ibanMyProvider.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getIban().toString()));
		ibanProvider.setCellValueFactory(c -> new SimpleStringProperty(c.getValue().getIban().toString()));
	}

	/**
	 * @author Florin Sia
	 * @see Thread
	 */
	private class WatchForChanges extends Thread {
		/*
		 * (non-Javadoc)
		 * 
		 * @see java.lang.Thread#run()
		 */
		@SuppressWarnings("static-access")
		public void run() {
			try {
				while (true) {
					refreshTable();
					this.sleep(15000);
				}
			} catch (InterruptedException e) {
				System.out.println();
			}

		}
	}

	/**
	 * This method is used to refresh to table in order to send notifications.
	 */
	public void refreshTable() {
		RequestResponse<List<Bill>> lookup = new RequestResponse<List<Bill>>(Main.host, Main.portNumber);
		lookup.request = RequestType.GET_BILLS_BY_CLIENT;
		lookup.parameters.add(currentClient);
		ClientCall<List<Bill>> callable = new ClientCall<List<Bill>>(lookup);
		List<Bill> bills = null;
		try {
			Future<List<Bill>> future = Main.clientExecutor.submit(callable);
			bills = future.get();
		} catch (Exception e) {
			System.out.println();
		}
		currentClient.setBills(bills);
		checkBoxHandle();
	}
}
