package svrcon;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;

import dao.PayServDAO;
import model.Client;

public class SvConnectionUtils implements SvConnection {
	private static final ForkJoinPool forkJoinPool = new ForkJoinPool();
	private static ExecutorService executor = Executors.newCachedThreadPool();

	@Override
	public Client getClientIfExist(String username) throws RemoteException {
		PayServDAO payServDAO = new PayServDAO();
		Callable<Client> task = () -> {
			return payServDAO.getClientByUsername(username);
		};
		Future<Client> future = executor.submit(task);
		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
			return null;
		}
	}

}
